// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebEvento.Data;

namespace WebEvento.Migrations
{
    [DbContext(typeof(WebDbContext))]
    partial class WebDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressTwo");

                    b.Property<string>("CaptionAddress");

                    b.Property<int?>("EventId");

                    b.Property<double>("Lattiude");

                    b.Property<double>("Longtiude");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Address_Eventoo");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Ceremony", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EventId");

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Cermoney");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Colors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorButton");

                    b.Property<string>("ColorFooter");

                    b.Property<string>("ColorHeader");

                    b.Property<string>("ColorSubContetntView");

                    b.HasKey("Id");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaptionComment");

                    b.Property<int?>("EventId");

                    b.Property<bool>("OkComment");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Eduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EventId");

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Eduction");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressOfId");

                    b.Property<string>("AddressUrl");

                    b.Property<string>("CaptionEvent");

                    b.Property<int>("CermoneyOfId");

                    b.Property<int>("CommentofId");

                    b.Property<string>("Description");

                    b.Property<int>("EductionOfId");

                    b.Property<DateTime>("EventNow");

                    b.Property<int>("ExhibotionOfId");

                    b.Property<string>("FromDate");

                    b.Property<string>("OtherLonging");

                    b.Property<int>("Payed");

                    b.Property<int>("PlaceOfId");

                    b.Property<string>("Price");

                    b.Property<byte[]>("SliderImages");

                    b.Property<bool>("StatuseChecked");

                    b.Property<bool>("StatuseEnter");

                    b.Property<int>("Statusevent");

                    b.Property<string>("Tell");

                    b.Property<string>("TimeEvent");

                    b.Property<string>("ToDate");

                    b.Property<int>("Type");

                    b.Property<int>("TypeCaption");

                    b.Property<string>("UserId");

                    b.Property<int>("UserofId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.EventResultBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DateTime");

                    b.Property<int>("EventId");

                    b.Property<decimal>("Price");

                    b.Property<string>("ReasonEvent");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("TranctionEvent");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Exhibition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EventId");

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Exhibition");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Images", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EventId");

                    b.Property<byte[]>("ImageData");

                    b.Property<string>("NameImage");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Information", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption");

                    b.Property<int>("Type");

                    b.Property<string>("UserForeignKey");

                    b.HasKey("Id");

                    b.HasIndex("UserForeignKey")
                        .IsUnique()
                        .HasFilter("[UserForeignKey] IS NOT NULL");

                    b.ToTable("Information");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.NotPublished", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeleteDate");

                    b.Property<string>("NameEvent");

                    b.HasKey("Id");

                    b.ToTable("NotPublished");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EventId");

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Place");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaptionReport");

                    b.Property<int?>("EventId");

                    b.Property<int?>("RoleReport");

                    b.Property<int>("evtId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Users", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("EmailUser")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<Guid>("KeyUserApp");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("Password");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Tellephone");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int>("Type");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("UsersOfId");

                    b.Property<int>("tested");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebEventoo_DomainClasses.Model.Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebEventoo_DomainClasses.Model.Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebEventoo_DomainClasses.Model.Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebEventoo_DomainClasses.Model.Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Address", b =>
                {
                    b.HasOne("WebEventoo_DomainClasses.Model.Event")
                        .WithMany("Address")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Ceremony", b =>
                {
                    b.HasOne("WebEventoo_DomainClasses.Model.Event")
                        .WithMany("Cermoney")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Comment", b =>
                {
                    b.HasOne("WebEventoo_DomainClasses.Model.Event", "Event")
                        .WithMany("Comment")
                        .HasForeignKey("EventId");

                    b.HasOne("WebEventoo_DomainClasses.Model.Users", "User")
                        .WithMany("Comment")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Eduction", b =>
                {
                    b.HasOne("WebEventoo_DomainClasses.Model.Event")
                        .WithMany("Eduction")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Event", b =>
                {
                    b.HasOne("WebEventoo_DomainClasses.Model.Users", "User")
                        .WithMany("Event")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.EventResultBank", b =>
                {
                    b.HasOne("WebEventoo_DomainClasses.Model.Event", "Event")
                        .WithOne("EventResultBank")
                        .HasForeignKey("WebEventoo_DomainClasses.Model.EventResultBank", "EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Exhibition", b =>
                {
                    b.HasOne("WebEventoo_DomainClasses.Model.Event")
                        .WithMany("Exhibotion")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Images", b =>
                {
                    b.HasOne("WebEventoo_DomainClasses.Model.Event")
                        .WithMany("Image")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Information", b =>
                {
                    b.HasOne("WebEventoo_DomainClasses.Model.Users", "User")
                        .WithOne("information")
                        .HasForeignKey("WebEventoo_DomainClasses.Model.Information", "UserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Place", b =>
                {
                    b.HasOne("WebEventoo_DomainClasses.Model.Event")
                        .WithMany("Place")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("WebEventoo_DomainClasses.Model.Report", b =>
                {
                    b.HasOne("WebEventoo_DomainClasses.Model.Event", "Event")
                        .WithMany("ReportList")
                        .HasForeignKey("EventId");
                });
#pragma warning restore 612, 618
        }
    }
}
